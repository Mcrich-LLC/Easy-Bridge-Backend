# Docker Compose file for Vapor
#
# Install Docker on your system to run and test
# your Vapor app in a production-like environment.
#
# Note: This file is intended for testing and does not
# implement best practices for a production deployment.
#
# Learn more: https://docs.docker.com/compose/reference/
#
#   Build images: docker-compose build
#      Start app: docker-compose up app
# Start database: docker-compose up db
# Run migrations: docker-compose run migrate
#       Stop all: docker-compose down (add -v to wipe db)
#
version: '3.7'

volumes:
  db_data:
  nitter-redis:
networks:
  easy-bridge-backend:
    driver: bridge

x-shared_environment: &shared_environment
  LOG_LEVEL: ${LOG_LEVEL:-debug}
  APP_PORT: ${APP_PORT}
  DATABASE_HOST: db
  DATABASE_NAME: vapor_database
  DATABASE_USERNAME: ${DATABASE_USERNAME}
  DATABASE_PASSWORD: ${DATABASE_PASSWORD}
  DATABASE_PORT: ${DATABASE_PORT}
  FCM_SERVICE_ACCOUNT_KEY_PATH: /var/lib/firebase/FCM-authkey.json
  ENV: ${ENV}
  internalEditBearerToken: ${internalEditBearerToken}
  fcm_auth_url: ${fcm_auth_url}
  firebaseCloudMessagingBearerToken: ${firebaseCloudMessagingBearerToken}
  firebaseWebAuthToken: ${firebaseWebAuthToken}
  pushoverNotificationKey: ${pushoverNotificationKey}
  devDeviceFCMId: ${devDeviceFCMId}
  
services:
  app:
    image: bridge--backend:latest
    volumes:
      - ./FCM-authkey.json:/var/lib/firebase/FCM-authkey.json
    build:
      context: .
    environment:
      <<: *shared_environment
    depends_on:
      - db
      - nitter
    ports:
      - '${APP_PORT}:${APP_PORT}'
    # user: '0' # uncomment to run as root for testing purposes even though Dockerfile defines 'vapor' user.
    command: ["serve", "--env", "${ENV}", "--hostname", "0.0.0.0", "--port", "${APP_PORT}"]
    restart: always
    networks:
      - easy-bridge-backend
  migrate:
    image: bridge--backend:latest
    volumes:
      - ./FCM-authkey.json:/var/lib/firebase/FCM-authkey.json
    build:
      context: .
    environment:
      <<: *shared_environment
    depends_on:
      - db
    command: ["migrate", "--yes"]
    deploy:
      replicas: 0
    restart: always
    networks:
      - easy-bridge-backend
  revert:
    image: bridge--backend:latest
    volumes:
      - ./FCM-authkey.json:/var/lib/firebase/FCM-authkey.json
    build:
      context: .
    environment:
      <<: *shared_environment
    depends_on:
      - db
    command: ["migrate", "--revert", "--yes"]
    deploy:
      replicas: 0
    restart: always
    networks:
      - easy-bridge-backend
  db:
    image: postgres:14-alpine
    volumes:
      - db_data:/var/lib/postgresql/data/pgdata
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: vapor_database
    ports:
      - '${DATABASE_PORT}:5432'
    restart: always
    networks:
      - easy-bridge-backend
  nitter:
    image: zedeus/nitter:latest
    volumes:
      - ./nitter/nitter.conf:/src/nitter.conf:Z,ro
    depends_on:
      - nitter-redis
    restart: always
    healthcheck:
      test: wget -nv --tries=1 --spider http://127.0.0.1:8080/Jack/status/20 || exit 1
      interval: 30s
      timeout: 5s
      retries: 2
    user: "998:998"
    read_only: true
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    networks:
      - easy-bridge-backend

  nitter-redis:
    image: redis:6-alpine
    command: redis-server --save 60 1 --loglevel warning
    volumes:
      - nitter-redis:/data
    restart: always
    healthcheck:
      test: redis-cli ping
      interval: 30s
      timeout: 5s
      retries: 2
    user: "999:1000"
    read_only: true
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    networks:
      - easy-bridge-backend
  # nginx:
  #   image: nginx
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
  #     - ./nginx/key.pem:/root/ssl/key.pem
  #     - ./nginx/cert.pem:/root/ssl/cert.pem
  #   ports:
  #     - '8080:8080'
  #     - '80:8080'
  #     - '443:8443'
  #   depends_on:
  #     - app
